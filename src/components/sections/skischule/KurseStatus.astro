---
import clsx from 'clsx'
import { fetchStories } from '@/storyblok/utils/fetchStories'

const statuses = {
  open: 'text-gray-600 bg-gray-50 ring-gray-500/10',
  pending: 'text-sky-700 bg-sky-50 ring-sky-700/20',
  go: 'text-green-700 bg-green-50 ring-green-600/20',
  rescheduled: 'text-yellow-800 bg-yellow-50 ring-yellow-600/20',
  canceld: 'text-rose-700 bg-rose-50 ring-rose-700/20',
}
const statusesTitles = {
  open: 'offen',
  pending: 'ungewiss',
  go: 'findet statt',
  rescheduled: 'verschoben',
  canceld: 'abgesagt',
}

// TODO: Move to class
const dateFormat = new Intl.DateTimeFormat('de-DE', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
})
const dateShortFormat = new Intl.DateTimeFormat('de-DE', {
  year: 'numeric',
  month: 'numeric',
  day: 'numeric',
})
const categoryOrder = ['Beginner', 'Junior_Champion', 'Champion']
const courseCategoryStories = await fetchStories({
  content_type: 'CourseCategory',
  per_page: 50,
})
const currencyFormat = new Intl.NumberFormat('de-DE', {
  style: 'currency',
  currency: 'EUR',
})
const courseCategories = courseCategoryStories
  .map((story) => {
    const { price, priceMember, minAge, maxAge, ...storyContent } =
      story.content

    return {
      ...storyContent,
      price: parseFloat(price),
      priceMember: parseFloat(priceMember),
      priceFormatted: currencyFormat.format(price),
      priceMemberFormatted: currencyFormat.format(priceMember),
      minAge: parseInt(minAge),
      maxAge: parseInt(maxAge),
      id: story.uuid,
      slug: story.slug,
    }
  })
  .sort(
    (a, b) =>
      categoryOrder.indexOf(a.skillLevel) - categoryOrder.indexOf(b.skillLevel),
  )
const courseCategoriesById = courseCategories.reduce((acc, category) => {
  acc[category.id] = category
  return acc
}, {})
const courseStories = await fetchStories({
  content_type: 'Course',
  per_page: 50,
  sort_by: 'content.startDate:asc',
})
const courses = courseStories.map((story) => {
  const startDate = new Date(`${story.content.startDate}+0000`)
  const endDate = new Date(`${story.content.endDate}+0000`)
  const {
    category: categoryId,
    closed = false,
    canceled = false,
    ...storyContent
  } = story.content

  return {
    canceled,
    closed,
    disabled: closed || canceled,
    state: undefined,
    stateColor: undefined,
    // price: category.price,
    //         priceMember: category.priceMember,
    ...storyContent,
    catgeory: courseCategoriesById[categoryId],
    categoryId,
    id: story.uuid,
    name: story.name,
    slug: story.slug,
    startDate,
    endDate,
    dateFormatted: dateFormat.formatRange(startDate, endDate),
    dateShortFormatted: dateShortFormat.formatRange(startDate, endDate),
  }
})
---

<div class="bg-white py-24 sm:py-32">
  <div class="box">
    <div class="max-w-2xl">
      <div class="typo-overline text-left text-sky-600">
        Aktualisiert am 01.01.2024 um 14.53 Uhr
      </div>
      <h2>
        <div class="typo-headline">Findet mein Kurs statt?</div>
      </h2>
    </div>

    <ul role="list" class="mt-4 divide-y divide-gray-100">
      {
        courses.map((course) => (
          <li class="flex items-center justify-between gap-x-6 py-5">
            <div class="min-w-0">
              <div class="flex items-start gap-x-3">
                <p class="text-sm font-semibold leading-6 text-gray-900">
                  {course.name}
                </p>
                <p
                  class={clsx(
                    statuses[course.status],
                    'mt-0.5 whitespace-nowrap rounded-md px-1.5 py-0.5 text-xs font-medium ring-1 ring-inset',
                  )}
                >
                  {statusesTitles[course.status ?? 'open']}
                </p>
              </div>
              <div class="mt-1 flex items-center gap-x-2 text-xs leading-5 text-gray-500">
                {course.dateFormatted}
              </div>
            </div>
          </li>
        ))
      }
    </ul>
  </div>
</div>
