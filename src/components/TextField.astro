---
import clsx from 'clsx'
import Icon from './Icon.astro'

const {
  startIcon,
  endIcon,
  required = true,
  placeholder,
  label,
  name,
  id,
  description,
  error,
  disabled = false,
  xModel,
  type = 'text',
  xError,
  xErrorMessage,
  className,
} = Astro.props

const finalId = id || label ? name : undefined

const isNumber = type === 'number'
---

<div class={clsx('text-sm leading-6', className)}>
  {
    label && (
      <div class="flex justify-between">
        <label
          for={finalId}
          class="block text-sm font-medium leading-6 text-gray-900"
        >
          {label}
        </label>
        {!required && (
          <span class="text-sm leading-6 text-gray-500" id="email-optional">
            Optional
          </span>
        )}
      </div>
    )
  }
  <div class={clsx('relative rounded-md shadow-sm', label && 'mt-1')}>
    {
      startIcon && (
        <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400">
          <Icon name={startIcon} sizeClass="w-5 h-5" />
        </div>
      )
    }
    <input
      type={type}
      id={finalId}
      class={clsx(
        'block w-full rounded-md border-0 py-1.5 ',
        'sm:text-sm sm:leading-6',
        'ring-1 ring-inset focus:ring-2 focus:ring-inset',
        'disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500 disabled:ring-gray-200',
        error
          ? 'text-red-900 ring-red-300 placeholder:text-red-300 focus:ring-red-500'
          : 'text-gray-900 ring-gray-300 placeholder:text-gray-400 focus:ring-sky-500',
        startIcon && 'pl-10',
        (endIcon || error) && 'pr-10',
      )}
      placeholder={placeholder}
      name={name}
      {...isNumber ? { 'x-model.number': xModel } : { 'x-model': xModel }}
    />
    {
      endIcon && !error && (
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
          <Icon name={endIcon} sizeClass="w-5 h-5" />
        </div>
      )
    }
    {
      error && (
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
          <svg
            class="h-5 w-5 text-red-500"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              fill-rule="evenodd"
              d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z"
              clip-rule="evenodd"
            />
          </svg>
        </div>
      )
    }
    {
      xError && (
        <div
          x-show={xError}
          class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3"
        >
          <svg
            class="h-5 w-5 text-red-500"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              fill-rule="evenodd"
              d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z"
              clip-rule="evenodd"
            />
          </svg>
        </div>
      )
    }
  </div>
  {
    error && (
      <div class="mt-1 text-sm text-red-600">
        <slot name="error">
          <p>{error}</p>
        </slot>
      </div>
    )
  }
  {
    xErrorMessage && (
      <div x-show={xError} class="mt-1 text-sm text-red-600">
        {xErrorMessage}
      </div>
    )
  }
  {
    description && (
      <div class="mt-1 text-sm text-gray-500">
        <slot name="description">
          <p>{description}</p>
        </slot>
      </div>
    )
  }
</div>
