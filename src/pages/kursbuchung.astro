---
import { fetchStories } from '../storyblok/utils/fetchStories'
import Page from '../layouts/Page.astro'
import FormSteps from '../components/FormSteps.astro'
import BookingSelection from '../components/BookingSelection.astro'
import BookingRegistration from '../components/BookingRegistration.astro'
import BookingConfirmation from '../components/BookingConfirmation.astro'
import BookingPayment from '../components/BookingPayment.astro'

const categoryOrder = ['Beginner', 'Junior_Champion', 'Champion']

const dateFormat = new Intl.DateTimeFormat('de-DE', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
})
const currencyFormat = new Intl.NumberFormat('de-DE', {
  style: 'currency',
  currency: 'EUR',
})

const courseCategoryStories = await fetchStories({
  content_type: 'CourseCategory',
  per_page: 50,
})
const courseCategories = courseCategoryStories
  .map((story) => {
    const { price, priceMember, minAge, maxAge, ...storyContent } =
      story.content

    return {
      ...storyContent,
      price: parseFloat(price),
      priceMember: parseFloat(priceMember),
      priceFormatted: currencyFormat.format(price),
      priceMemberFormatted: currencyFormat.format(priceMember),
      minAge: parseInt(minAge),
      maxAge: parseInt(maxAge),
      id: story.uuid,
      slug: story.slug,
    }
  })
  .sort(
    (a, b) =>
      categoryOrder.indexOf(a.skillLevel) - categoryOrder.indexOf(b.skillLevel),
  )
const courseCategoriesById = courseCategories.reduce((acc, category) => {
  acc[category.id] = category
  return acc
}, {})

const courseStories = await fetchStories({
  content_type: 'Course',
  per_page: 50,
  sort_by: 'content.startDate:asc',
})
const courses = courseStories.map((story) => {
  const startDate = new Date(`${story.content.startDate}+0000`)
  const endDate = new Date(`${story.content.endDate}+0000`)
  const {
    category: categoryId,
    closed = false,
    canceled = false,
    ...storyContent
  } = story.content

  return {
    canceled,
    closed,
    disabled: closed || canceled,
    state: undefined,
    stateColor: undefined,
    // price: category.price,
    //         priceMember: category.priceMember,
    ...storyContent,
    catgeory: courseCategoriesById[categoryId],
    categoryId,
    id: story.uuid,
    name: story.name,
    slug: story.slug,
    startDate,
    endDate,
    dateFormatted: dateFormat.formatRange(startDate, endDate),
  }
})
// .sort((a, b) => a.startDate - b.startDate)

const key = 'booking'

const Discipline = {
  Ski: 'Ski',
  Snowboard: 'Snowboard',
}

const disciplines = {
  [Discipline.Ski]: {
    value: Discipline.Ski,
    label: 'Skikurs',
    description: 'Für Kinder ab 4 bis einschließlich 13 Jahren',
    minAge: 4,
    maxAge: 13,
  },
  [Discipline.Snowboard]: {
    value: Discipline.Snowboard,
    label: 'Snowboardkurs',
    description: 'Für Kinder ab 6 bis einschließlich 13 Jahren',
    minAge: 6,
    maxAge: 13,
  },
}
---

<Page title="Kursbuchung" description="" className="bg-gray-50">
  <form x-data={key} class="box py-10" name="booking" netlify>
    <FormSteps />
    <div class="mt-10">
      <BookingSelection stepSlug="selection" />
      <BookingRegistration stepSlug="booking" />
    </div>
  </form>
</Page>

<script
  is:inline
  define:vars={{ key, Discipline, disciplines, courses, courseCategories }}
>
  document.addEventListener('alpine:init', () => {
    const currencyFormat = new Intl.NumberFormat('de-DE', {
      style: 'currency',
      currency: 'EUR',
    })

    const getCategories = (kid, categories) => {
      const availableCategories = categories.filter((category) => {
        return (
          category.discipline === kid.discipline &&
          parseInt(category.minAge) <= parseInt(kid.age) &&
          parseInt(category.maxAge) >= parseInt(kid.age)
        )
      })

      return availableCategories
    }

    const getDates = (kid, dates) => {
      return dates.filter((date) => date.categoryId === kid.categoryId)
    }

    // console.log(
    //   getDates(
    //     {categoryId: { age: 6, discipline: Discipline.Ski, skillLevel: 'Beginner' },
    //     courses,
    //   ),
    // )

    // getCategories

    const testKid = {
      discipline: Discipline.Ski,
      firstname: 'Marie-Luise',
      lastname: 'Westermann von der What',
      isMember: true,
      age: 6,
      skillLevel: 'Beginner',
      dates: ['ski-beginner-1', 'ski-beginner-2'],
    }

    const [testCategory] = getCategories(testKid, courseCategories)
    testKid.categoryId = testCategory?.id
    testKid.dates = getDates(testKid, courses)?.map((date) => date.slug)

    const defaultkid = {
      discipline: Discipline.Ski,
      age: 6,
      isMember: false,
      skillLevel: 'Beginner',
      dates: [],
      // ...testKid,
    }

    console.log(defaultkid)
    console.log(testCategory)

    const steps = [
      {
        index: 0,
        slug: 'selection',
        label: 'Kurs auswählen',
      },
      {
        index: 1,
        slug: 'booking',
        label: 'Kurs buchen',
      },
      // {
      //   index: 2,
      //   slug: 'confirmation',
      //   label: 'Bestätigen',
      // },
      {
        index: 2,
        slug: 'complete',
        label: 'Fertig!',
      },
    ]

    const currentStep = 0

    Alpine.data(key, () => ({
      discountPercentage: 0.1,
      currentStep,
      step: steps[currentStep],
      steps,
      currencyFormat,
      disciplines,
      courseCategories,
      courses,
      contact: {
        salutation: '',
        firstname: '',
        lastname: '',
        email: '',
        phone: '',
        address: '',
        postalCode: '',
        city: '',
      },
      kids: [],
      addKid() {
        this.kids.push({
          id: Date.now(),
          ...defaultkid,
        })
      },
      removeKid(kid) {
        this.kids = this.kids.filter((k) => k.id !== kid.id)
      },
      isAgeValid(kid) {
        const discipline = disciplines.find(
          (discipline) => discipline.value === kid.discipline,
        )
        return kid.age >= discipline?.age && kid.age <= discipline?.maxAge
      },
      getSelectedCategory(kid) {
        const category = courseCategories.find(
          (category) => category.id === kid.categoryId,
        )
        return category
      },
      getCategories(kid) {
        // kid.categoryId = undefined
        // kid.dates = []
        return getCategories(kid, courseCategories)
      },
      getCategoriesOptions(kid) {
        const categories = getCategories(kid, courseCategories).map(
          (category) => ({
            ...category,
            label: category.name,
            value: category.id,
          }),
        )

        // kid.dates = []
        // kid.categoryId = categories?.[0]?.id
        return categories
      },
      getDateOptions(kid) {
        return getDates(kid, courses).map((date) => {
          return {
            ...date,
            label: date.name,
            value: date.slug,

            state: 'wenige Plätze',
            // state: 'ausgebucht',
            // state: 'abgesagt',
            // disabled: true,
            // closed: true,
          }
        })
      },
      formatPrice(price) {
        return this.currencyFormat.format(price)
      },
      getPriceFinal(kid) {
        return kid.isMember ? this.getPriceMember(kid) : this.getPrice(kid)
      },
      getPriceMember(kid) {
        const price = this.getSelectedCategory(kid)?.priceMember ?? 0
        const total = kid.dates?.length * price
        return total
      },
      getPrice(kid) {
        const price = this.getSelectedCategory(kid)?.price ?? 0
        const total = kid.dates?.length * price
        return total
      },
      getSubtotal() {
        const total = this.kids.reduce((acc, kid) => {
          const price = this.getPriceFinal(kid)
          return price + acc
        }, 0)
        return total
      },
      getDiscount() {
        return this.getSubtotal() * this.discountPercentage
      },
      getTotal() {
        return this.getSubtotal() * (1 - this.discountPercentage)
      },
      nextStep() {
        const step = this.currentStep + 1
        if (step < this.steps.length) {
          this.gotoStep(step)
        }
      },
      prevStep() {
        const step = this.currentStep - 1
        if (step >= 0) {
          this.gotoStep(step)
        }
      },
      gotoStep(index) {
        this.currentStep = index
        this.step = steps[index]
      },
      init() {
        console.log('init')
        this.addKid()
      },
    }))
  })
</script>
